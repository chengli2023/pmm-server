{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int} cursor_pos Expected edit position in text1 (optional)\n * @return {Array} Array of diff tuples.\n */\n\nfunction diff_main(text1, text2, cursor_pos) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n\n    return [];\n  } // Check cursor_pos within bounds\n\n\n  if (cursor_pos < 0 || text1.length < cursor_pos) {\n    cursor_pos = null;\n  } // Trim off common prefix (speedup).\n\n\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength); // Trim off common suffix (speedup).\n\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength); // Compute the diff on the middle block.\n\n  var diffs = diff_compute_(text1, text2); // Restore the prefix and suffix.\n\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n\n  diff_cleanupMerge(diffs);\n\n  if (cursor_pos != null) {\n    diffs = fix_cursor(diffs, cursor_pos);\n  }\n\n  diffs = fix_emoji(diffs);\n  return diffs;\n}\n\n;\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\n\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]]; // Swap insertions for deletions if diff is reversed.\n\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  } // Check to see if the problem can be split in two.\n\n\n  var hm = diff_halfMatch_(text1, text2);\n\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4]; // Send both pairs off for separate processing.\n\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b); // Merge the results.\n\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n}\n\n;\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\n\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length); // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length; // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n\n  var front = delta % 2 != 0; // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n\n      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n\n      var y1 = x1 - k1;\n\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n\n      v1[k1_offset] = x1;\n\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    } // Walk the reverse path one step.\n\n\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n\n      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n\n      var y2 = x2 - k2;\n\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n\n      v2[k2_offset] = x2;\n\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset; // Mirror x2 onto top-left coordinate system.\n\n          x2 = text1_length - x2;\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  } // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n\n\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\n\n;\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\n\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y); // Compute both diffs serially.\n\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n  return diffs.concat(diffsb);\n}\n\n;\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\n\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  return pointermid;\n}\n\n;\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\n\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  return pointermid;\n}\n\n;\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\n\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n\n\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  } // First check if the second quarter is the seed for a half-match.\n\n\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4)); // Check again based on the third quarter.\n\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  } // A half-match was found, sort out the return data.\n\n\n  var text1_a, text1_b, text2_a, text2_b;\n\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n}\n\n;\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\n\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            } // Factor out any common suffixies.\n\n\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          } // Delete the offending records and add the merged ones.\n\n\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n          }\n\n          pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  } // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\n\n  var changes = false;\n  pointer = 1; // Intentionally ignore the first and last element (don't need checking).\n\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n\n    pointer++;\n  } // If shifts were made, the diff needs reordering and another shift sweep.\n\n\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n}\n\n;\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\nmodule.exports = diff;\n/*\n * Modify a diff such that the cursor position points to the start of a change:\n * E.g.\n *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n */\n\nfunction cursor_normalize_diff(diffs, cursor_pos) {\n  if (cursor_pos === 0) {\n    return [DIFF_EQUAL, diffs];\n  }\n\n  for (var current_pos = 0, i = 0; i < diffs.length; i++) {\n    var d = diffs[i];\n\n    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n      var next_pos = current_pos + d[1].length;\n\n      if (cursor_pos === next_pos) {\n        return [i + 1, diffs];\n      } else if (cursor_pos < next_pos) {\n        // copy to prevent side effects\n        diffs = diffs.slice(); // split d into two diff changes\n\n        var split_pos = cursor_pos - current_pos;\n        var d_left = [d[0], d[1].slice(0, split_pos)];\n        var d_right = [d[0], d[1].slice(split_pos)];\n        diffs.splice(i, 1, d_left, d_right);\n        return [i + 1, diffs];\n      } else {\n        current_pos = next_pos;\n      }\n    }\n  }\n\n  throw new Error('cursor_pos is out of bounds!');\n}\n/*\n * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n *\n * Case 1)\n *   Check if a naive shift is possible:\n *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n * Case 2)\n *   Check if the following shifts are possible:\n *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n *         ^            ^\n *         d          d_next\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} Array of diff tuples\n */\n\n\nfunction fix_cursor(diffs, cursor_pos) {\n  var norm = cursor_normalize_diff(diffs, cursor_pos);\n  var ndiffs = norm[1];\n  var cursor_pointer = norm[0];\n  var d = ndiffs[cursor_pointer];\n  var d_next = ndiffs[cursor_pointer + 1];\n\n  if (d == null) {\n    // Text was deleted from end of original string,\n    // cursor is now out of bounds in new string\n    return diffs;\n  } else if (d[0] !== DIFF_EQUAL) {\n    // A modification happened at the cursor location.\n    // This is the expected outcome, so we can return the original diff.\n    return diffs;\n  } else {\n    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n      // Case 1)\n      // It is possible to perform a naive shift\n      ndiffs.splice(cursor_pointer, 2, d_next, d);\n      return merge_tuples(ndiffs, cursor_pointer, 2);\n    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n      // Case 2)\n      // d[1] is a prefix of d_next[1]\n      // We can assume that d_next[0] !== 0, since d[0] === 0\n      // Shift edit locations..\n      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n      var suffix = d_next[1].slice(d[1].length);\n\n      if (suffix.length > 0) {\n        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n      }\n\n      return merge_tuples(ndiffs, cursor_pointer, 3);\n    } else {\n      // Not possible to perform any modification\n      return diffs;\n    }\n  }\n}\n/*\n * Check diff did not split surrogate pairs.\n * Ex. [0, '\\uD83D'], [-1, '\\uDC36'], [1, '\\uDC2F'] -> [-1, '\\uD83D\\uDC36'], [1, '\\uD83D\\uDC2F']\n *     '\\uD83D\\uDC36' === '🐶', '\\uD83D\\uDC2F' === '🐯'\n *\n * @param {Array} diffs Array of diff tuples\n * @return {Array} Array of diff tuples\n */\n\n\nfunction fix_emoji(diffs) {\n  var compact = false;\n\n  var starts_with_pair_end = function (str) {\n    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;\n  };\n\n  var ends_with_pair_start = function (str) {\n    return str.charCodeAt(str.length - 1) >= 0xD800 && str.charCodeAt(str.length - 1) <= 0xDBFF;\n  };\n\n  for (var i = 2; i < diffs.length; i += 1) {\n    if (diffs[i - 2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i - 2][1]) && diffs[i - 1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i - 1][1]) && diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {\n      compact = true;\n      diffs[i - 1][1] = diffs[i - 2][1].slice(-1) + diffs[i - 1][1];\n      diffs[i][1] = diffs[i - 2][1].slice(-1) + diffs[i][1];\n      diffs[i - 2][1] = diffs[i - 2][1].slice(0, -1);\n    }\n  }\n\n  if (!compact) {\n    return diffs;\n  }\n\n  var fixed_diffs = [];\n\n  for (var i = 0; i < diffs.length; i += 1) {\n    if (diffs[i][1].length > 0) {\n      fixed_diffs.push(diffs[i]);\n    }\n  }\n\n  return fixed_diffs;\n}\n/*\n * Try to merge tuples with their neigbors in a given range.\n * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n *\n * @param {Array} diffs Array of diff tuples.\n * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n * @param {Int} length Number of consecutive elements to check.\n * @return {Array} Array of merged diff tuples.\n */\n\n\nfunction merge_tuples(diffs, start, length) {\n  // Check from (start-1) to (start+length).\n  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n    if (i + 1 < diffs.length) {\n      var left_d = diffs[i];\n      var right_d = diffs[i + 1];\n\n      if (left_d[0] === right_d[1]) {\n        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n      }\n    }\n  }\n\n  return diffs;\n}","map":{"version":3,"names":["DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","diff_main","text1","text2","cursor_pos","length","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","fix_cursor","fix_emoji","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_bisect_","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_halfMatchI_","seed","j","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","pointer","count_delete","count_insert","text_delete","text_insert","splice","pop","changes","diff","INSERT","DELETE","EQUAL","module","exports","cursor_normalize_diff","current_pos","next_pos","slice","split_pos","d_left","d_right","Error","norm","ndiffs","cursor_pointer","d_next","merge_tuples","suffix","compact","starts_with_pair_end","str","charCodeAt","ends_with_pair_start","fixed_diffs","start","left_d","right_d"],"sources":["/Users/licheng/Documents/untitled/node_modules/fast-diff/diff.js"],"sourcesContent":["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int} cursor_pos Expected edit position in text1 (optional)\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Check cursor_pos within bounds\n  if (cursor_pos < 0 || text1.length < cursor_pos) {\n    cursor_pos = null;\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  if (cursor_pos != null) {\n    diffs = fix_cursor(diffs, cursor_pos);\n  }\n  diffs = fix_emoji(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i),\n                                           shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i),\n                                           shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n};\n\n\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n\n/*\n * Modify a diff such that the cursor position points to the start of a change:\n * E.g.\n *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n */\nfunction cursor_normalize_diff (diffs, cursor_pos) {\n  if (cursor_pos === 0) {\n    return [DIFF_EQUAL, diffs];\n  }\n  for (var current_pos = 0, i = 0; i < diffs.length; i++) {\n    var d = diffs[i];\n    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n      var next_pos = current_pos + d[1].length;\n      if (cursor_pos === next_pos) {\n        return [i + 1, diffs];\n      } else if (cursor_pos < next_pos) {\n        // copy to prevent side effects\n        diffs = diffs.slice();\n        // split d into two diff changes\n        var split_pos = cursor_pos - current_pos;\n        var d_left = [d[0], d[1].slice(0, split_pos)];\n        var d_right = [d[0], d[1].slice(split_pos)];\n        diffs.splice(i, 1, d_left, d_right);\n        return [i + 1, diffs];\n      } else {\n        current_pos = next_pos;\n      }\n    }\n  }\n  throw new Error('cursor_pos is out of bounds!')\n}\n\n/*\n * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n *\n * Case 1)\n *   Check if a naive shift is possible:\n *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n * Case 2)\n *   Check if the following shifts are possible:\n *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n *         ^            ^\n *         d          d_next\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} Array of diff tuples\n */\nfunction fix_cursor (diffs, cursor_pos) {\n  var norm = cursor_normalize_diff(diffs, cursor_pos);\n  var ndiffs = norm[1];\n  var cursor_pointer = norm[0];\n  var d = ndiffs[cursor_pointer];\n  var d_next = ndiffs[cursor_pointer + 1];\n\n  if (d == null) {\n    // Text was deleted from end of original string,\n    // cursor is now out of bounds in new string\n    return diffs;\n  } else if (d[0] !== DIFF_EQUAL) {\n    // A modification happened at the cursor location.\n    // This is the expected outcome, so we can return the original diff.\n    return diffs;\n  } else {\n    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n      // Case 1)\n      // It is possible to perform a naive shift\n      ndiffs.splice(cursor_pointer, 2, d_next, d)\n      return merge_tuples(ndiffs, cursor_pointer, 2)\n    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n      // Case 2)\n      // d[1] is a prefix of d_next[1]\n      // We can assume that d_next[0] !== 0, since d[0] === 0\n      // Shift edit locations..\n      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n      var suffix = d_next[1].slice(d[1].length);\n      if (suffix.length > 0) {\n        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n      }\n      return merge_tuples(ndiffs, cursor_pointer, 3)\n    } else {\n      // Not possible to perform any modification\n      return diffs;\n    }\n  }\n}\n\n/*\n * Check diff did not split surrogate pairs.\n * Ex. [0, '\\uD83D'], [-1, '\\uDC36'], [1, '\\uDC2F'] -> [-1, '\\uD83D\\uDC36'], [1, '\\uD83D\\uDC2F']\n *     '\\uD83D\\uDC36' === '🐶', '\\uD83D\\uDC2F' === '🐯'\n *\n * @param {Array} diffs Array of diff tuples\n * @return {Array} Array of diff tuples\n */\nfunction fix_emoji (diffs) {\n  var compact = false;\n  var starts_with_pair_end = function(str) {\n    return str.charCodeAt(0) >= 0xDC00 && str.charCodeAt(0) <= 0xDFFF;\n  }\n  var ends_with_pair_start = function(str) {\n    return str.charCodeAt(str.length-1) >= 0xD800 && str.charCodeAt(str.length-1) <= 0xDBFF;\n  }\n  for (var i = 2; i < diffs.length; i += 1) {\n    if (diffs[i-2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i-2][1]) &&\n        diffs[i-1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i-1][1]) &&\n        diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {\n      compact = true;\n\n      diffs[i-1][1] = diffs[i-2][1].slice(-1) + diffs[i-1][1];\n      diffs[i][1] = diffs[i-2][1].slice(-1) + diffs[i][1];\n\n      diffs[i-2][1] = diffs[i-2][1].slice(0, -1);\n    }\n  }\n  if (!compact) {\n    return diffs;\n  }\n  var fixed_diffs = [];\n  for (var i = 0; i < diffs.length; i += 1) {\n    if (diffs[i][1].length > 0) {\n      fixed_diffs.push(diffs[i]);\n    }\n  }\n  return fixed_diffs;\n}\n\n/*\n * Try to merge tuples with their neigbors in a given range.\n * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n *\n * @param {Array} diffs Array of diff tuples.\n * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n * @param {Int} length Number of consecutive elements to check.\n * @return {Array} Array of merged diff tuples.\n */\nfunction merge_tuples (diffs, start, length) {\n  // Check from (start-1) to (start+length).\n  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n    if (i + 1 < diffs.length) {\n      var left_d = diffs[i];\n      var right_d = diffs[i+1];\n      if (left_d[0] === right_d[1]) {\n        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n      }\n    }\n  }\n  return diffs;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}